.TH "Callbaks del interfaz" 3 "Martes, 19 de Abril de 2016" "Version 1" "ClienteIRC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Callbaks del interfaz \- 
Funciones que van a ser llamadas desde el interface y que deben ser implementadas por el usuario\&. Todas estas funciones pertenecen al hilo del interfaz\&.
.PP
El programador puede, por supuesto, separar todas estas funciones en múltiples ficheros a efectos de desarrollo y modularización\&.
.PP
.PP
 IRCInterface_ActivateProtectTopic
Llamada por el botón de activación de la protección de tópico\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateProtectTopic (char * channel)
.PP
Llamada por el botón de activación de la protección de tópico\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateProtectTopic"
Llamada por el botón de desactivación de la protección de tópico\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateProtectTopic (char * channel)
.PP
Llamada por el botón de desactivación de la protección de tópico\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateExternalMessages"
Llamada por el botón de activación de la recepción de mensajes externos\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateExternalMessages (char * channel)
.PP
Llamada por el botón de activación de la recepción de mensajes externos\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateExternalMessages"
Llamada por el botón de desactivación de la recepción de mensajes externos\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateExternalMessages (char * channel)
.PP
Llamada por el botón de desactivación de la recepción de mensajes externos\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateSecret"
Llamada por el botón de activación de canal secreto\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateSecret (char * channel)
.PP
Llamada por el botón de activación de canal secreto\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateSecret"
Llamada por el botón de desactivación de canal secreto\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateSecret (char * channel)
.PP
Llamada por el botón de desactivación de canal secreto\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateInvite"
Llamada por el botón de activación de canal de sólo invitación\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateInvite (char * channel)
.PP
Llamada por el botón de activación de canal de sólo invitación\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateInvite"
Llamada por el botón de desactivación de canal de sólo invitación\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateInvite (char * channel)
.PP
Llamada por el botón de desactivación de canal de sólo invitación\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivatePrivate"
Llamada por el botón de activación del modo privado\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivatePrivate (char * channel)
.PP
Llamada por el botón de activación del modo privado\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivatePrivate"
Llamada por el botón de desactivación del modo privado\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivatePrivate (char * channel)
.PP
Llamada por el botón de desactivación del modo privado\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateModerated"
Llamada por el botón de activación de la moderación del canal\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateModerated (char * channel)
.PP
Llamada por el botón de activación de la moderación del canal\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateModerated"
Llamada por el botón de desactivación de la moderación del canal\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateModerated (char * channel)
.PP
Llamada por el botón de desactivación de la moderación del canal\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateChannelKey"
Llamada por el botón de activación de la clave del canal\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateChannelKey (char * channel, char * key)
.PP
Llamada por el botón de activación de la clave del canal\&. El segundo parámetro es la clave del canal que se desea poner\&. Si es NULL deberá impedirse la activación con la función implementada a tal efecto\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateChannelKey"
Llamada por el botón de desactivación de la clave del canal\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateChannelKey (char * channel)
.PP
Llamada por el botón de desactivación de la clave del canal\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ActivateNicksLimit"
Llamada por el botón de activación del límite de usuarios en el canal\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ActivateNicksLimit (char * channel, int * limit)
.PP
Llamada por el botón de activación del límite de usuarios en el canal\&. El segundo es el límite de usuarios que se desea poner\&. Si el valor es 0 se sobrentiende que se desea eliminar este límite\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DeactivateNicksLimit"
Llamada por el botón de desactivación de la protección de tópico\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DeactivateNicksLimit (char * channel)
.PP
Llamada por el botón de desactivación del límite de usuarios en el canal\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_NewTopicEnter"
Llamada cuando se pulsa la tecla ENTER en el campo de tópico\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_NewTopicEnter (char * topicdata)
.PP
Llamada cuando se pulsa la tecla ENTER en el campo de tópico\&. Deberá intentarse cambiar el tópico del canal\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_NewCommandText"
Llamada la tecla ENTER en el campo de texto y comandos\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_NewCommandText (char * command) jo  Llamada de la tecla ENTER en el campo de texto y comandos\&. El texto deberá ser enviado y el comando procesado por las funciones de 'parseo' de comandos de usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_GiveOp"
Llamada por el botón 'Op'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_GiveOp (char * channel, char *nick)
.PP
Llamada por el botón 'Op'\&. Previamente debe seleccionarse un nick del canal para darle 'op' a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_TakeOp"
Llamada por el botón 'Quitar Op'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_TakeOp (char *channel, char *nick)
.PP
Llamada por el botón 'Quitar Op'\&. Previamente debe seleccionarse un nick del canal para quitarle 'op' a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_GiveVoice"
Llamada por el botón 'Dar voz'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_GiveVoice (char * channel, char *nick)
.PP
Llamada por el botón 'Dar voz'\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_TakeVoice"
Llamada por el botón 'Quitar voz'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_TakeVoice (char * channel, char *nick)
.PP
Llamada por el botón 'Quitar voz'\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_BanNick"
Llamada por el botón 'Banear'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_BanNick (char * channel, char *nick)
.PP
Llamada por el botón 'Banear'\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_KickNick"
Llamada por el botón 'Echar'\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_KickNick (char * channel, char *nick)
.PP
Llamada por el botón 'Echar'\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
No devuelve ningún valor ni código de error\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_StartAudioChat"
Llamada por el botón 'Iniciar' del diálogo de chat de voz\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_StartAudioChat (char *nick)
.PP
Llamada por el botón 'Iniciar' del diálogo de chat de voz\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&. Esta función como todos los demás callbacks bloquea el interface y por tanto para mantener la funcionalidad del chat de voz es imprescindible crear un hilo a efectos de comunicación de voz\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
Devuelve TRUE si se ha establecido la comunicación y FALSE en caso contrario\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_StopAudioChat"
Llamada por el botón 'Parar' del diálogo de chat de voz\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_StopAudioChat (char *nick)
.PP
Llamada por el botón 'Parar' del diálogo de chat de voz\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&. Esta función sólo para la comunicación que puede ser reiniciada\&. Evidentemente tiene que actuar sobre el hilo de chat de voz\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
Devuelve TRUE si se ha parado la comunicación y FALSE en caso contrario\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_ExitAudioChat"
Llamada por el botón 'Cancelar' del diálogo de chat de voz\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_ExitAudioChat (char *nick)
.PP
Llamada por el botón 'Parar' del diálogo de chat de voz\&. Previamente debe seleccionarse un nick del canal para darle voz a dicho usuario\&. Esta función cierrala comunicación\&. Evidentemente tiene que actuar sobre el hilo de chat de voz\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
Devuelve TRUE si se ha cerrado la comunicación y FALSE en caso contrario\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_DisconnectServer"
Llamada por los distintos botones de desconexión\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_DisconnectServer (char * server, int port)
.PP
Llamada por los distintos botones de desconexión\&. Debe cerrar la conexión con el servidor\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
Devuelve TRUE si se ha cerrado la conexión y FALSE en caso contrario\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SS "IRCInterface_Connect"
Llamada por los distintos botones de conexión\&.
.PP
#include <redes2/ircxchat\&.h>
.PP
void IRCInterface_Connect (char *nick, char * user, char * realname, char * password, char * server, int port, boolean ssl)
.PP
Llamada por los distintos botones de conexión\&. Si implementará la comunicación completa, incluido el registro del usuario en el servidor\&.
.PP
En cualquier caso sólo se puede realizar si el servidor acepta la orden\&.
.PP
Esta función debe ser implementada por el alumno\&.
.PP
\fBDevuelve:\fP
.RS 4
Devuelve IRC_OK si todo ha sido correcto, IRCERR_NOSSL si el valor de SSL es TRUE y no se puede activar la conexión SSL pero sí una conexión no protegida\&. Devolverá IRCERR_NOCONNECT en caso de que no se pueda realizar la comunicación\&.
.RE
.PP
\fBAutor:\fP
.RS 4
Eloy Anguiano (eloy.anguiano@uam.es)
.RE
.PP
.PP
 
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para ClienteIRC del código fuente\&.
